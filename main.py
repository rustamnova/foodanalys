import logging
import os
import base64
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F, Router
from aiogram.types import Message
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from io import BytesIO
from openai import OpenAI

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞
client = OpenAI(api_key=OPENAI_API_KEY)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)

# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏ –º–Ω–µ —Ñ–æ—Ç–æ —Å–æ—Å—Ç–∞–≤–∞ –ø—Ä–æ–¥—É–∫—Ç–∞, –∏ —è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –µ–≥–æ –ø—Ä–∏ –ø–æ–º–æ—â–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ GPT.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
@router.message(F.photo)
async def handle_photo(message: Message):
    await message.answer("üì∑ –ó–∞–≥—Ä—É–∂–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–¥–∞—é –≤ –Ω–µ–π—Ä–æ—Å–µ—Ç—å...")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∏–±–æ–ª—å—à–µ–µ —Ñ–æ—Ç–æ
        photo = message.photo[-1]
        file = await bot.get_file(photo.file_id)
        photo_path = file.file_path

        # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        photo_bytes = await bot.download_file(photo_path)
        image_bytes = photo_bytes.read()

        # –ö–æ–¥–∏—Ä—É–µ–º –≤ base64
        b64_image = base64.b64encode(image_bytes).decode("utf-8")

        await message.answer("üß† GPT –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–∞–≤...")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –≤ GPT-4o
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {
                    "role": "system",
                    "content": "–¢—ã –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥. –ù–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ ‚Äî —Å–æ—Å—Ç–∞–≤ –ø—Ä–æ–¥—É–∫—Ç–∞. –ò–∑–≤–ª–µ–∫–∏ –µ–≥–æ –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π: –≤—ã–¥–µ–ª–∏ –≤—Ä–µ–¥–Ω—ã–µ –¥–æ–±–∞–≤–∫–∏, –∞–ª–ª–µ—Ä–≥–µ–Ω—ã, —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –≤–µ—â–µ—Å—Ç–≤–∞. –î–∞–π –∫—Ä–∞—Ç–∫–∏–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –≤—ã–≤–æ–¥."
                },
                {
                    "role": "user",
                    "content": [
                        {
                            "type": "text",
                            "text": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ—Å—Ç–∞–≤ –Ω–∞ —Ñ–æ—Ç–æ."
                        },
                        {
                            "type": "image_url",
                            "image_url": {
                                "url": f"data:image/jpeg;base64,{b64_image}",
                                "detail": "high"
                            }
                        }
                    ]
                }
            ],
            max_tokens=1000
        )

        result = response.choices[0].message.content
        await message.answer(f"üìã –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–∞–≤–∞:\n\n{result}", parse_mode=ParseMode.MARKDOWN)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ GPT: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–∏—à–ª–∏ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    import asyncio
    asyncio.run(dp.start_polling(bot))
