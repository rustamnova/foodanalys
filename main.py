import logging
import os
import base64
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F, Router
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from io import BytesIO
from openai import OpenAI

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
client = OpenAI(api_key=OPENAI_API_KEY)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())
router = Router()
dp.include_router(router)
logging.basicConfig(level=logging.INFO)

# –ö–Ω–æ–ø–∫–∏
def analysis_options_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üíä –î–æ–±–∞–≤–∫–∏ (E-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã)", callback_data="filter_additives")],
        [InlineKeyboardButton(text="üß† –í–ª–∏—è–Ω–∏–µ –Ω–∞ –∑–¥–æ—Ä–æ–≤—å–µ", callback_data="filter_health")],
        [InlineKeyboardButton(text="üåæ –ê–ª–ª–µ—Ä–≥–µ–Ω—ã", callback_data="filter_allergens")],
    ])

# –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
image_analysis_prompt = (
    "–¢—ã –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥. –ù–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ ‚Äî —É–ø–∞–∫–æ–≤–∫–∞ —Å —Å–æ—Å—Ç–∞–≤–æ–º –ø—Ä–æ–¥—É–∫—Ç–∞. "
    "–ò–∑–≤–ª–µ–∫–∏ —Ç–µ–∫—Å—Ç –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –µ–≥–æ: —É–∫–∞–∂–∏ –≤—Ä–µ–¥–Ω—ã–µ –≤–µ—â–µ—Å—Ç–≤–∞, –¥–æ–±–∞–≤–∫–∏, –∞–ª–ª–µ—Ä–≥–µ–Ω—ã. "
    "–û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–æ."
)

# –°—Ç–∞—Ä—Ç
@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏ –º–Ω–µ —Ñ–æ—Ç–æ —Å–æ—Å—Ç–∞–≤–∞ –ø—Ä–æ–¥—É–∫—Ç–∞, –∏ —è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –µ–≥–æ.")

# –§–æ—Ç–æ
@router.message(F.photo)
async def handle_photo(message: Message, state: FSMContext):
    await message.answer("üì∑ –ó–∞–≥—Ä—É–∂–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        photo = message.photo[-1]
        file_info = await bot.get_file(photo.file_id)
        photo_data = await bot.download_file(file_info.file_path)
        image_bytes = photo_data.read()
        b64_image = base64.b64encode(image_bytes).decode("utf-8")

        logging.info("‚ñ∂Ô∏è –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", message.from_user.id)
        logging.info("üß† –ü—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:\n%s", image_analysis_prompt)

        await message.answer("üß† GPT –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–∞–≤...")

        # –ü–µ—Ä–≤—ã–π –∞–Ω–∞–ª–∏–∑
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": image_analysis_prompt},
                {
                    "role": "user",
                    "content": [
                        {"type": "text", "text": "–í–æ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–ø–∞–∫–æ–≤–∫–∏:"},
                        {
                            "type": "image_url",
                            "image_url": {
                                "url": f"data:image/jpeg;base64,{b64_image}",
                                "detail": "high"
                            }
                        }
                    ]
                }
            ],
            max_tokens=1000
        )

        result = response.choices[0].message.content
        logging.info("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç GPT (–∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è):\n%s", result)

        await state.update_data(last_text=result)

        await message.answer(f"üìã –í–æ—Ç –∞–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–∞–≤–∞:\n\n{result}", parse_mode=ParseMode.MARKDOWN)
        await message.answer("üîé –ß—Ç–æ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ?", reply_markup=analysis_options_kb())

    except Exception as e:
        logging.error("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: %s", e)
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
@router.callback_query(F.data.startswith("filter_"))
async def handle_filter(callback: CallbackQuery, state: FSMContext):
    await callback.answer("üîÑ –ü–µ—Ä–µ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é...")

    data = await state.get_data()
    text = data.get("last_text")

    if not text:
        await callback.message.answer("‚ö†Ô∏è –ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ —Å–Ω–∞—á–∞–ª–∞.")
        return

    filters = {
        "filter_additives": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–∏—â–µ–≤—ã—Ö –¥–æ–±–∞–≤–æ–∫ (E-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤), –Ω–∞–ø—Ä–∏–º–µ—Ä E120, E621 –∏ —Ç.–ø. –û–ø–∏—à–∏ –∏—Ö —Å–≤–æ–π—Å—Ç–≤–∞ –∏ –≤–æ–∑–º–æ–∂–Ω—ã–π –≤—Ä–µ–¥.",
        "filter_health": "–û—Ü–µ–Ω–∏, –∫–∞–∫ —Å–æ—Å—Ç–∞–≤ –≤–ª–∏—è–µ—Ç –Ω–∞ –∑–¥–æ—Ä–æ–≤—å–µ —á–µ–ª–æ–≤–µ–∫–∞: –ñ–ö–¢, –ø–µ—á–µ–Ω—å, —Å–µ—Ä–¥—Ü–µ, —ç–Ω–¥–æ–∫—Ä–∏–Ω–Ω—É—é, –Ω–µ—Ä–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—ã.",
        "filter_allergens": "–ù–∞–π–¥–∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∞–ª–ª–µ—Ä–≥–µ–Ω—ã –≤ —Ç–µ–∫—Å—Ç–µ. –ü–æ–¥—á–µ—Ä–∫–Ω–∏ —Ç–µ, —á—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ –æ–ø–∞—Å–Ω—ã –¥–ª—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –ª—é–¥–µ–π (–≥–ª—é—Ç–µ–Ω, –º–æ–ª–æ–∫–æ, —è–π—Ü–∞, –æ—Ä–µ—Ö–∏, —Å–æ—è –∏ —Ç.–ø.).",
    }

    system_prompt = filters.get(callback.data)
    logging.info("üìå –í—ã–±—Ä–∞–Ω —Ñ–∏–ª—å—Ç—Ä: %s", callback.data)
    logging.info("üß† –ü—Ä–æ–º–ø—Ç –¥–ª—è —É—Ç–æ—á–Ω—ë–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:\n%s", system_prompt)
    logging.info("üìÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π —Ç–µ–∫—Å—Ç:\n%s", text)

    try:
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": text}
            ],
            max_tokens=1000
        )

        answer = response.choices[0].message.content
        logging.info("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç GPT (–ø–æ —Ñ–∏–ª—å—Ç—Ä—É):\n%s", answer)

        await callback.message.answer(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç:\n\n{answer}", parse_mode=ParseMode.MARKDOWN)

    except Exception as e:
        logging.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: %s", e)
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    import asyncio
    asyncio.run(dp.start_polling(bot))
